class Solution {
    
    public int[][] totalCosts ;
    
    public int minCost(int[][] costs) {
        
        if(costs.length == 0 )
        return 0;
        totalCosts = new int[costs.length][3];
        totalCosts[0][0] = costs[0][0];
        totalCosts[0][1] = costs[0][1];
        totalCosts[0][2] = costs[0][2];
        return leastCostSearch(costs.length-1,-1,costs);
    }
    
    private int leastCostSearch(int i, int color, int[][] costs) //0->red, 1->Blue, 2->Green
    {
       // System.out.println("Called with index = "+i+" and color= "+color);
        if(i < 0 )
        return 0;
        else 
        {
        totalCosts[i][0] = (totalCosts[i][0])<=0 ? (costs[i][0] + leastCostSearch(i-1, 0, costs)) :                                                        (totalCosts[i][0]);
        totalCosts[i][1] = (totalCosts[i][1])<=0 ? (costs[i][1] + leastCostSearch(i-1, 1, costs)) :                                                       (totalCosts[i][1]);
        totalCosts[i][2] =  (totalCosts[i][2])<=0 ? (costs[i][2] + leastCostSearch(i-1, 2, costs)) :                                                       (totalCosts[i][2]);
        }
        if(color == 0)
            return Math.min(totalCosts[i][1],totalCosts[i][2]);
        else if(color == 1)
             return Math.min(totalCosts[i][0],totalCosts[i][2]);
        else if(color == 2)
             return Math.min(totalCosts[i][0],totalCosts[i][1]);
        else
            return Math.min( Math.min(totalCosts[i][0],totalCosts[i][1]), 
                                Math.min(totalCosts[i][0],totalCosts[i][2]) );
            
        } 
    
}
